#!/usr/bin/env ruby

require 'gli'
require 'broadside'

include GLI::App
include Broadside::Utils

program_desc 'A command-line tool for deployment and development of docker applications.'

version Broadside::VERSION

subcommand_option_handling :normal
arguments :strict
synopsis_format :full

desc 'Configuration file to use.'
default_value 'config/broadside.conf.rb'
arg_name 'FILE'
flag [:c, :config]

def add_shared_deploy_configs(subcmd)
  # deployment always requires target
  subcmd.desc 'Deployment target to use, e.g. production_web'
  subcmd.arg_name 'TARGET'
  subcmd.flag [:t, :target], type: Symbol

  subcmd.action do |global_options, options, args|
    _DeployObj = Kernel.const_get("Broadside::#{Broadside.config.deploy.type.capitalize}Deploy")
    _DeployObj.new(options).send(subcmd.name)
  end
end

# GLI type coercions
accept Symbol do |val|
  val.to_sym
end
accept Array do |val|
  val.split(' ')
end
accept Fixnum do |val|
  val.to_i
end

desc 'Deploy your application.'
command :deploy do |d|
  d.desc 'Deploys without running migrations'
  d.command :short do |subcmd|
    subcmd.desc 'Docker tag for application container'
    subcmd.arg_name 'TAG'
    subcmd.flag [:tag]

    add_shared_deploy_configs(subcmd)
  end

  d.desc 'Performs a full deployment (with migration)'
  d.command :full do |subcmd|
    subcmd.desc 'Docker tag for application container'
    subcmd.arg_name 'TAG'
    subcmd.flag [:tag]

    add_shared_deploy_configs(subcmd)
  end

  d.desc 'Scales application to a given count'
  d.command :scale do |subcmd|
    subcmd.desc 'Specify a new scale for application'
    subcmd.arg_name 'NUM'
    subcmd.flag [:s, :scale], type: Fixnum

    add_shared_deploy_configs(subcmd)
  end

  d.desc 'Creates a single instance of the application to run a command.'
  d.command :run do |subcmd|
    subcmd.desc 'Docker tag for application container'
    subcmd.arg_name 'TAG'
    subcmd.flag [:tag]

    subcmd.desc 'Command to run (wrap argument in quotes)'
    subcmd.arg_name 'COMMAND'
    subcmd.flag [:command], type: Array

    add_shared_deploy_configs(subcmd)
  end

  d.desc 'Rolls back n releases and deploys'
  d.command :rollback do |subcmd|
    subcmd.desc 'Number of releases to rollback'
    subcmd.arg_name 'COUNT'
    subcmd.flag [:r, :rollback], type: Fixnum

    add_shared_deploy_configs(subcmd)
  end

  d.desc 'Gets information about what is currently deployed.'
  d.command :status do |subcmd|
    add_shared_deploy_configs(subcmd)
  end

  d.desc 'Tail the logs inside the running container.'
  d.command :logtail do |subcmd|
    subcmd.desc '0-based instance index'
    subcmd.default_value 0
    subcmd.arg_name 'INSTANCE'
    subcmd.flag [:n, :instance], type: Fixnum

    add_shared_deploy_configs(subcmd)
  end

  d.desc 'Establish a secure shell on the instance running the container.'
  d.command :ssh do |subcmd|
    subcmd.desc '0-based instance index'
    subcmd.default_value 0
    subcmd.arg_name 'INSTANCE'
    subcmd.flag [:n, :instance], type: Fixnum

    add_shared_deploy_configs(subcmd)
  end

  d.desc 'Establish a shell inside the running container.'
  d.command :bash do |subcmd|
    subcmd.desc '0-based instance index'
    subcmd.default_value 0
    subcmd.arg_name 'INSTANCE'
    subcmd.flag [:n, :instance], type: Fixnum

    add_shared_deploy_configs(subcmd)
  end
end

def call_hook(type, command)
  hook = Broadside.config.base.send(type)
  if hook.is_a?(Proc)
    hook_args =
      if command.parent.is_a?(GLI::Command)
        {
          command: command.parent.name,
          subcommand: command.name
        }
      else
        { command: command.name }
      end
    debug "Calling", type, "with args", hook_args
    hook.call(hook_args)
  end
end

pre do |global, command, options, args|
  Broadside.load_config(global[:config])

  call_hook(:prehook, command)
  true
end

post do |global, command, options, args|
  call_hook(:posthook, command)
  true
end


on_error do |exception|
  # false skips default error handling
  case exception
  when Broadside::MissingVariableError
    error exception.message, "\nRun your last command with --help for more information."
    false
  else
    true
  end
end

exit run(ARGV)
